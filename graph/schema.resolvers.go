package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"

	"github.com/lawfal/go-graph-tripatra/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.RegisterInput) (*model.User, error) {
	newUser, err := r.UserRepository.RegisterUser(&input)
	if err != nil {
		return nil, err
	}

	return newUser.FilteredResponse(), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.User, error) {
	updated, err := r.UserRepository.UpdateUser(input.ID, input)
	if err != nil {
		return nil, err
	}

	return updated.FilteredResponse(), nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	_, err := r.UserRepository.DeleteUser(id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// AddProduct is the resolver for the addProduct field.
func (r *mutationResolver) AddProduct(ctx context.Context, input model.AddProductInput) (*model.Product, error) {
	newProduct, err := r.ProductRepository.CreateProduct(input)
	if err != nil {
		return nil, err
	}

	return newProduct.FilteredResponse(), nil
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, input model.UpdateProductInput) (*model.Product, error) {
	updateProduct, err := r.ProductRepository.UpdateProduct(input.ID, input)
	if err != nil {
		return nil, err
	}

	return updateProduct.FilteredResponse(), nil
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (*bool, error) {
	_, err := r.ProductRepository.DeleteProduct(id)
	if err != nil {
		return nil, err
	}

	return nil, nil
}

// FindUser is the resolver for the findUser field.
func (r *queryResolver) FindUser(ctx context.Context, id string) (*model.User, error) {
	user, err := r.UserRepository.FindUserById(id)
	if err != nil {
		return nil, err
	}
	return user.FilteredResponse(), nil
}

// GetAllUser is the resolver for the getAllUser field.
func (r *queryResolver) GetAllUser(ctx context.Context) ([]*model.User, error) {
	users, err := r.UserRepository.GetAllUser()
	if err != nil {
		return nil, err
	}

	var usersFiltered []*model.User
	for _, user := range users {
		usersFiltered = append(usersFiltered, user.FilteredResponse())
	}

	return usersFiltered, nil
}

// FindProduct is the resolver for the findProduct field.
func (r *queryResolver) FindProduct(ctx context.Context, id string) (*model.Product, error) {
	product, err := r.ProductRepository.FindProductByID(id)
	if err != nil {
		return nil, err
	}

	return product.FilteredResponse(), nil
}

// GetAllProduct is the resolver for the getAllProduct field.
func (r *queryResolver) GetAllProduct(ctx context.Context) ([]*model.Product, error) {
	products, err := r.ProductRepository.GetAllProduct()
	if err != nil {
		return nil, err
	}

	var productsFiltered []*model.Product
	for _, product := range products {
		productsFiltered = append(productsFiltered, product.FilteredResponse())
	}

	return productsFiltered, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
